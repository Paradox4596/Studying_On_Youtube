인터페이스와 조작법 살펴보기 [유니티 입문 강좌 B1]
https://youtu.be/lYzGTUJxPDQ?si=fAD4KR02gsrfdWq6

-----------------------------------------------------------------------------------------------------------------------------------------------------

Q(뷰 이동) - 마우스 좌클릭 드래그 : 보는 방향에 수직되는 평면상에서 카메라 이동
카메라 우클릭 드래그 : 카메라 위치를 고정시키고 보는 방향을 회전시키기
Alt + 좌클릭 : 현재 화면을 중심으로 카메라 이동시키기
Alt + 우클릭 // 마우스 휠 돌리기 : 현재 화면을 중심으로 확대 & 축소
키보드 방향키 : 보는 방향 평면상에서 카메라 이동

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

유니티 프로그래밍의 시작, 콘솔창에 메세지 띄워보기 [유니티 입문 강좌 B3]
https://youtu.be/1QyynHJ-3Ec?si=R3r4iwqygViixHOq

-----------------------------------------------------------------------------------------------------------------------------------------------------

Debug.Log(); : 콘솔창에 메시지 출력 - ※ Log 맨 앞이 대문자임에 주의!

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

유니티 C# 프로그래밍 기초. 한방에 정리하기 [유니티 입문 강좌 B4]
https://youtu.be/j6XLEqgq-dE?si=49rR2VKGF6HOotLW

-----------------------------------------------------------------------------------------------------------------------------------------------------

그룹형 변수 : 변수들을 묶은 하나의 장소.
변수 하나에는 여러가지 데이터를 한번에 넣을 수 없으므로 그룹형 변수를 사용한다.

배열 : 가장 기본적인 고정형 그룹형 변수
ex) string[] monsters = { "슬라임", "사막뱀", "악마" };

리스트 : 기능이 추가된 가변형 그룹형 변수
ex) List<> items = new List<>();
배열과 다르게 안에 있는 데이터를 삭제 할 수 있다.
ex) items.RemoveAt(0);

키워드 : 프로그래밍 언어를 구성하는 특별한 단어
ex) int float string bool new List
변수 이름으로도 할 수 없으면 값으로도 사용 할 수 없다.
ex) int float = 1; (x)
ex) string name = List; (x)

swtich, case 예시:

switch (monsters[0])
{
    case "슬라임":
    case "사막뱀": // 따로 구분 할 필요없이 case 나열 가능
        Debug.Log("소형 몬스터가 출현!");
        break;
    case "악마":
        Debug.Log("중형 몬스터가 출현!");
        break;
    case "골렘":
        Debug.Log("대형 몬스터가 출현!");
        break;
    default: // 모든 케이스에 해당 되지 않아서 통과했을때 처리하는 방식
        Debug.Log("??? 몬스터가 출현!");
        break;
}

for (연산 될 변수 ; 조건 ; 연산) 
{로직}

그룹형 변수의 길이 : .Length(배열) .Count(리스트)

foreach : for의 그룹형변수 탐색 특화

함수 : 여러가지 기능을 편리하게 사용하도록 구성된 영역

인스턴스 : 정의된 클래스를 변수 초기화로 실체화
private : 외부 클래스에 비공개로 설정하는 접근자
MonoBehaviour : 유니티 게임 오브젝트 클래스
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
